#
# Gordon Taskqueue Config
#

# Redis server address
redis_address = "127.0.0.1:6379"

# Queue key, which is basically a prefix for all used redis-keys.
queue_key = "taskqueue"

# Logfile which is used instead of stdout.
# If commented or an empty string, no logfile will be used.
# logfile = "/var/log/gordon.log"

# Directory which is used for temporary files.
# If commented or an empty string, the system-default will be used.
# temp_dir = "/tmp"

# Check internal settings
# These values define how often the application will look for new tasks. When no
# new tasks were found the interval is increased by the defined values (minimum value
# and factor). When at least on task is found again the interval will be reset to the minium.

# The miminum check-interval for new tasks, in ms.
interval_min = 250
# The maximum check-interval for new tasks, in ms.
interval_max = 30000
# The multiplicator of the minimum interval when no new tasks were found, as float.
interval_factor = 2.0

# Global settings
# These settings here will be applied to every task, unless the values are set on task-level
# (e.g. a value greater than 0) or when `ignore_global_settings = true` is set.

# Error backoff
# Uncomment or set this value to false, to disable the error-backoff functionality for all tasks.
backoff_enabled = true
# The minimum time to wait after a task failed, in ms.
backoff_min = 250
# The maxiumum time to wait after a task failed, in ms.
backoff_max = 20000
# The multiplicator of the minimum time with every additional failed task, as float.
backoff_factor = 2.0

# Path to a script that is executed when a task failed.
# It will be executed with two environment variables:
#   task_type: The task-type
#   task_data: JSON-encoded string of the task-object, which contains all of the related data like this:
#       `{"args":["argument"],"env":{"key":"value"}}`
# The script also receives the full path to a temporary file as the first parameter,
# which contains the output of the failed task. It will be removed by Gordon
# after the execution of this script.
# If commented or an empty string, this functionality is disabled.
# error_script = "/opt/sendErrorNotification.py"

# It is also possible to define an error_webhook.
# This endpoint will receive an http-post-request with these (form-encoded) parameters:
#   task_type: The task-type
#   task_data: JSON-encoded string of the task-object, which contains all of the related data like this:
#     `{"args":["argument"],"env":{"key":"value"}}`
error_webhook = "https://api.business.com/webhooks/report_error"

# The global time-to-live value (in seconds) for the lists that are storing failed tasks.
# If commented or set to 0, this functionality is disabled.
# This value can also be overridden (a value greater than 0) on task-level.
failed_tasks_ttl = 172800

# Statistics related settings
[stats]
# Interface where a webservice will listen on.
# If commented or an empty string, no webservice will be created.
# interface = "127.0.0.1:8080"

# NewRelic agent related settings
# (uncomment and define those values accordingly to enable it)
#[stats.newrelic]
#license = "8fb744b51a1f14e5e8cda4e4aec68e2f"
#app_name = "Gordon Taskqueue"

[tasks]

[tasks.something]
script = "/opt/something.php"
workers = 2

[tasks.something_else]
script = "/opt/something_else.py"
# The following flag ignores all globally set values, so these need/can to be set here again specifically when needed.
# Default values will still be applied, though.
ignore_global_settings = true

# The following task is an example for a webhook-task.
# Arguments passed for this task are joined together and appended to the url (as the path)
# while environment-values are used as parameters.
# A few special environment-variables can be used for such tasks:
#   :method     - Allows to change the used http-method from the setting here
#   :json       - When used in conjunction with a post-request, this will result in a rest-post
#   :header:*   - Allows to add individual headers (e.g. :header:API-KEY)
[tasks.some_web_task.webhook]
url = "https://api.business.com/webhooks"
method = "GET" # is POST by default
    [tasks.some_web_task.webhook.headers]
    API-KEY = "8fb744b51a1f14e5e8cda4e4aec68e2f"
